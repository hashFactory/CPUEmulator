0x01
2 byte
MOV
Moves data byte from memory into chosen register

0x02
1 byte
PUSH
Pushes a single byte to the stack, incrementing pointer
From register 2 to stack

0x03
1 byte
POP
Retrieves a single byte, designated by argument byte from the stack, decreasing pointer
Putting it in register 2

0x04
2 byte
ADD
Adds the first register and second register and stores the result in the first register

0x05
2 byte
SUB
Subtracts first register and second register and stores the result in the first register

0x06
2 byte
PLACE
Places chosen byte into chosen register, quite simple enim

0x07
1 byte
PRINT
Prints out chosen byte in number form

0x08
2 byte
MUL
Multiplies first register and second register and stores the result in the first register

0x09
2 byte
DIV
Divides first register and second register and stores the result in the first register

0x0a
2 byte
AND
Logic AND on the two registers specified

0x0b
2 byte
OR
Logic OR on the two registers specified

0x0c
1 byte
NOT
Logic NOT on the register specified

0x0d
2 byte
NAND
Logic NAND on the two specified registers

0x0e
2 byte
NOR
Logic NOR on the two specified registers

0x0f
2 byte
XOR
Logic XOR on the two specified registers

0x10
1 byte
PRINTHEX
Print out the specified register in hex form

0x11
1 byte
JMP
Goes to the specified memory location

0x12
4 byte
CMP
Compares the first two byte and jumps to 3rd byte in memory if true, 4th byte if false

0x13
0 byte
HLT
Exits the program

0x14
1 byte
RND
Creates random byte and puts it in specified register